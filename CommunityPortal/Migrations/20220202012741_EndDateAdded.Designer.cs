// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220202012741_EndDateAdded")]
    partial class EndDateAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "053ca7c0-6c3c-4e30-941a-8486915e0e48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53d5f66e-45c4-484f-b4b1-7988875cb941",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            ImageURL = "/images/default-profile.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENyCXXqtPherrUEfgMyBt8B5izsnEFNeuMMDbujlsjpcRtnktoYzLLPCRD/atR4EQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c7ccc93-61e8-47ce-8078-3363255f7f5b",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "9da7b9d4-2d62-455f-b482-535814e2c4d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e4d9096-b358-43ad-bc76-de015ecb1d33",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPP22BPrx+RebmhYqIe8nPyeI9QQ3b67P50SxNOKIqK4yxxePa8ufODLizp7vqV7Eg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d64f3d7e-b53a-4b8b-a858-72ba0cc46963",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "8fb20f89-1f6f-474c-9c3b-794288e6545a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2b10625-f2de-42db-8c0d-e639097bff22",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEO7zZ3nIe9LQ5ZSRGNDoZzdUeFHP8XWNYNTYpO54Xffmmdop37Kq4wx6eA+uWLP91g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4807f0ca-2eeb-48b2-8922-79c4688c8afc",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "90855d76-cbec-4a13-a8d8-02c963cdb0c5",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "a4d2c0d7-8fde-4658-bda0-858e934f9616",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "90855d76-cbec-4a13-a8d8-02c963cdb0c5",
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            CategoryId = "a4d2c0d7-8fde-4658-bda0-858e934f9616",
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            CategoryId = "a4d2c0d7-8fde-4658-bda0-858e934f9616",
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "419c98a8-bb79-43bc-a2f6-e5ee82e932b8",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "ac51b608-f5a9-4595-bf0e-ad65182c818f",
                            Content = "We will be meeting in the town centre on the specified date.",
                            EndDate = new DateTime(2022, 2, 6, 2, 27, 38, 40, DateTimeKind.Local).AddTicks(4496),
                            StartDate = new DateTime(2022, 2, 5, 2, 27, 38, 40, DateTimeKind.Local).AddTicks(3017),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 2, 2, 2, 27, 38, 29, DateTimeKind.Local).AddTicks(109),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "b4b15ed1-8b18-4cb4-b613-db0945305e05",
                            Content = "We will begin a riot on Walmart on the second street",
                            EndDate = new DateTime(2022, 2, 13, 2, 27, 38, 40, DateTimeKind.Local).AddTicks(6262),
                            StartDate = new DateTime(2022, 2, 12, 2, 27, 38, 40, DateTimeKind.Local).AddTicks(6200),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 2, 2, 2, 27, 38, 40, DateTimeKind.Local).AddTicks(6107),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "1fc3272a-b1d5-4d4e-b9a5-578c553f2484",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "16b00208-10e7-4cca-8df2-25179be88e53",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "9c8bd8d9-9f74-4ef4-b851-aa5ebf853d4b",
                            Name = "Gamers",
                            OwnerId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "484c20af-6c98-4ffb-8710-6a9758b5b8c8",
                            Name = "Programmers",
                            OwnerId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "b4a2dc34-52a0-4837-8846-590129143156",
                            Name = "General",
                            OwnerId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "706c61e8-f966-40f5-938e-966a38889b48",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "419c98a8-bb79-43bc-a2f6-e5ee82e932b8",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 27, 38, 88, DateTimeKind.Local).AddTicks(3957),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "a98ea8c6-b94c-447e-87d1-2370391f1062",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "419c98a8-bb79-43bc-a2f6-e5ee82e932b8",
                            TimeStamp = new DateTime(2022, 2, 2, 5, 27, 38, 88, DateTimeKind.Local).AddTicks(5708),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "7f7a8f92-96ec-4486-9efe-a45354f2a918",
                            CategoryId = "90855d76-cbec-4a13-a8d8-02c963cdb0c5",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 2, 2, 2, 27, 38, 89, DateTimeKind.Local).AddTicks(5846),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "4d05755a-65fb-47a6-8cc3-20d0fdc4c8e1",
                            CategoryId = "a4d2c0d7-8fde-4658-bda0-858e934f9616",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 2, 2, 2, 27, 38, 89, DateTimeKind.Local).AddTicks(7588),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "7f7a8f92-96ec-4486-9efe-a45354f2a918",
                            TagId = "31d2a604-01e5-4400-8271-51bfa8b28f19"
                        },
                        new
                        {
                            PostId = "7f7a8f92-96ec-4486-9efe-a45354f2a918",
                            TagId = "d05d7af6-0480-4521-a492-b566046374a0"
                        },
                        new
                        {
                            PostId = "4d05755a-65fb-47a6-8cc3-20d0fdc4c8e1",
                            TagId = "31d2a604-01e5-4400-8271-51bfa8b28f19"
                        },
                        new
                        {
                            PostId = "4d05755a-65fb-47a6-8cc3-20d0fdc4c8e1",
                            TagId = "7df76fab-a5e2-4595-94f1-08da203fe9e2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "bae518bf-fe8c-498d-bf78-c3322dc4901e",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "b321bba1-3c73-49b1-8852-6ffed613ee65",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 27, 38, 94, DateTimeKind.Local).AddTicks(8783),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "760065b4-0dcd-4e5a-b353-6db4b3b080ab",
                            Content = "Use google.",
                            ThreadId = "b321bba1-3c73-49b1-8852-6ffed613ee65",
                            TimeStamp = new DateTime(2022, 2, 2, 7, 27, 38, 95, DateTimeKind.Local).AddTicks(402),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "9fa072fc-ec21-4711-8817-95b26ed0e45a",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "507156e4-0f2e-469c-ae2f-dd33f021e5ac",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 27, 38, 95, DateTimeKind.Local).AddTicks(564),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "7dac2f43-2581-49df-bca8-ee70bd4f310d",
                            Content = "lol noob",
                            ThreadId = "507156e4-0f2e-469c-ae2f-dd33f021e5ac",
                            TimeStamp = new DateTime(2022, 2, 2, 6, 27, 38, 95, DateTimeKind.Local).AddTicks(610),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "88de14de-7fee-4707-94a5-2ee8ac419f4e",
                            Content = "COME 1V1 ME",
                            ThreadId = "507156e4-0f2e-469c-ae2f-dd33f021e5ac",
                            TimeStamp = new DateTime(2022, 2, 2, 8, 27, 38, 95, DateTimeKind.Local).AddTicks(647),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "cc60612b-b30a-4e77-a10e-8469e1e90834",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "07fb12d7-7d05-480f-a28c-23fa4a6a1b60",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 27, 38, 95, DateTimeKind.Local).AddTicks(703),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "38b4aee7-2473-49c8-b733-b1b621d98a14",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "07fb12d7-7d05-480f-a28c-23fa4a6a1b60",
                            TimeStamp = new DateTime(2022, 2, 2, 4, 27, 38, 95, DateTimeKind.Local).AddTicks(739),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "ad3073bb-b8d6-46c8-97de-ea4b40f205d5",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "1fc3272a-b1d5-4d4e-b9a5-578c553f2484",
                            Name = "C#",
                            OwnerId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "5a32669e-f556-450f-aefb-35ff7c1096c8",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "16b00208-10e7-4cca-8df2-25179be88e53",
                            Name = "League of Legends",
                            OwnerId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "bf70815f-5b55-452c-a996-c15c3606cae5",
                            Description = "Everything about Minecraft",
                            ForumId = "16b00208-10e7-4cca-8df2-25179be88e53",
                            Name = "Minecraft",
                            OwnerId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "9c8bd8d9-9f74-4ef4-b851-aa5ebf853d4b",
                            SubForumId = "5a32669e-f556-450f-aefb-35ff7c1096c8"
                        },
                        new
                        {
                            GroupId = "9c8bd8d9-9f74-4ef4-b851-aa5ebf853d4b",
                            SubForumId = "bf70815f-5b55-452c-a996-c15c3606cae5"
                        },
                        new
                        {
                            GroupId = "484c20af-6c98-4ffb-8710-6a9758b5b8c8",
                            SubForumId = "ad3073bb-b8d6-46c8-97de-ea4b40f205d5"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "31d2a604-01e5-4400-8271-51bfa8b28f19",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "d05d7af6-0480-4521-a492-b566046374a0",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "7df76fab-a5e2-4595-94f1-08da203fe9e2",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "b321bba1-3c73-49b1-8852-6ffed613ee65",
                            SubForumId = "ad3073bb-b8d6-46c8-97de-ea4b40f205d5",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 27, 38, 93, DateTimeKind.Local).AddTicks(7839),
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4"
                        },
                        new
                        {
                            Id = "507156e4-0f2e-469c-ae2f-dd33f021e5ac",
                            SubForumId = "5a32669e-f556-450f-aefb-35ff7c1096c8",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 2, 3, 2, 27, 38, 93, DateTimeKind.Local).AddTicks(9662),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        },
                        new
                        {
                            Id = "07fb12d7-7d05-480f-a28c-23fa4a6a1b60",
                            SubForumId = "bf70815f-5b55-452c-a996-c15c3606cae5",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 2, 2, 8, 27, 38, 93, DateTimeKind.Local).AddTicks(9777),
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4",
                            ConversationId = "419c98a8-bb79-43bc-a2f6-e5ee82e932b8"
                        },
                        new
                        {
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a",
                            ConversationId = "419c98a8-bb79-43bc-a2f6-e5ee82e932b8"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4",
                            GroupId = "9c8bd8d9-9f74-4ef4-b851-aa5ebf853d4b"
                        },
                        new
                        {
                            UserId = "9da7b9d4-2d62-455f-b482-535814e2c4d4",
                            GroupId = "484c20af-6c98-4ffb-8710-6a9758b5b8c8"
                        },
                        new
                        {
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a",
                            GroupId = "9c8bd8d9-9f74-4ef4-b851-aa5ebf853d4b"
                        },
                        new
                        {
                            UserId = "8fb20f89-1f6f-474c-9c3b-794288e6545a",
                            GroupId = "484c20af-6c98-4ffb-8710-6a9758b5b8c8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b9c0b0e3-50e5-4660-bf39-91a66172a677",
                            ConcurrencyStamp = "ca9f6835-bae2-4375-9ecd-152b8af16d0a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7126879e-2d6a-4b65-a7d8-52f23cd909c4",
                            ConcurrencyStamp = "fa89a04b-a4ea-4a7d-96e8-220f78c8b442",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "053ca7c0-6c3c-4e30-941a-8486915e0e48",
                            RoleId = "b9c0b0e3-50e5-4660-bf39-91a66172a677"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Reply", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
