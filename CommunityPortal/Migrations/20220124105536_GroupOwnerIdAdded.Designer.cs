// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220124105536_GroupOwnerIdAdded")]
    partial class GroupOwnerIdAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "725c5431-6bf5-42bb-a968-060403ad2e0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "495b10ab-1a66-40ab-84e1-585473f1ecff",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJx4NMU1U0Yidyo3fta787ySojva/MbPbPBViFZMIniNczDbmmT1WfxSCeu2mKRWGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad353b61-378e-41d2-8040-c8dda1b1c6a4",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f517e54-0791-40c3-bd22-03103d8773b1",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEEUBK29vwdj/ZFt3KeSzhBAJzDgEOJpZ+S7ByXQ5OUcvSx28ng7117kOlYsLEv78fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "131cd0ee-7ccc-4327-9b95-8754dffbc55d",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "cf3d3d49-5b35-4fba-a077-a11de76bf1e3",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "3922f6f9-6613-4b53-a74e-852a9d82d9a3",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "cf3d3d49-5b35-4fba-a077-a11de76bf1e3",
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            CategoryId = "3922f6f9-6613-4b53-a74e-852a9d82d9a3",
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            CategoryId = "3922f6f9-6613-4b53-a74e-852a9d82d9a3",
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "a530f177-5f06-4572-bb1a-991bbade2fd8",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "cbabcda8-9697-4cbf-a630-df0370dd6450",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 1, 27, 11, 55, 35, 769, DateTimeKind.Local).AddTicks(1692),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 1, 24, 11, 55, 35, 767, DateTimeKind.Local).AddTicks(1342),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "cb8eef8f-0d4d-46b2-94a8-588e0ad6851c",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 3, 11, 55, 35, 769, DateTimeKind.Local).AddTicks(2147),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 1, 24, 11, 55, 35, 769, DateTimeKind.Local).AddTicks(2128),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "c300c635-dbc3-48ba-8958-01eab50d29ee",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "9b3b754b-25df-4338-ba5a-e9cf7da3d101",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "c8579023-b05c-40f0-97d5-5c462dd87d2c",
                            Name = "Gamers",
                            OwnerId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "53a802aa-6e59-4f1d-9d79-24a7a0a01c05",
                            Name = "Programmers",
                            OwnerId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "0d64271b-64af-42b5-b1e7-8237f3c67421",
                            Name = "General",
                            OwnerId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "a0bb40c7-f95e-4545-805e-bf279bbdc7b7",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "a530f177-5f06-4572-bb1a-991bbade2fd8",
                            TimeStamp = new DateTime(2022, 1, 24, 11, 55, 35, 769, DateTimeKind.Local).AddTicks(6857),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "704cc157-92fe-4314-a59c-974e100131c4",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "a530f177-5f06-4572-bb1a-991bbade2fd8",
                            TimeStamp = new DateTime(2022, 1, 24, 14, 55, 35, 769, DateTimeKind.Local).AddTicks(7240),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "64509879-7b93-48a0-884a-afdb26c53a18",
                            CategoryId = "cf3d3d49-5b35-4fba-a077-a11de76bf1e3",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 1, 24, 11, 55, 35, 769, DateTimeKind.Local).AddTicks(9271),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "9beaff8b-1c8e-43ac-944f-e23283176e4c",
                            CategoryId = "3922f6f9-6613-4b53-a74e-852a9d82d9a3",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 1, 26, 0, 55, 35, 769, DateTimeKind.Local).AddTicks(9641),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "64509879-7b93-48a0-884a-afdb26c53a18",
                            TagId = "7c72e7f2-5e55-4b28-9883-9d67158aba72"
                        },
                        new
                        {
                            PostId = "64509879-7b93-48a0-884a-afdb26c53a18",
                            TagId = "9ac533d5-60b0-4793-81ef-1d827fa36e4e"
                        },
                        new
                        {
                            PostId = "9beaff8b-1c8e-43ac-944f-e23283176e4c",
                            TagId = "7c72e7f2-5e55-4b28-9883-9d67158aba72"
                        },
                        new
                        {
                            PostId = "9beaff8b-1c8e-43ac-944f-e23283176e4c",
                            TagId = "d78b1bbf-770a-4b6f-acdf-f3c3f7d24cfe"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "9a6b7444-86f6-4bcb-86e1-afebe6e51003",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "78949cce-3c1f-4a37-8c9c-aa422be6b49a",
                            TimeStamp = new DateTime(2022, 1, 24, 11, 55, 35, 771, DateTimeKind.Local).AddTicks(133),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "47c90354-0922-4fcf-951f-ee2641e7f2db",
                            Content = "Use google.",
                            ThreadId = "78949cce-3c1f-4a37-8c9c-aa422be6b49a",
                            TimeStamp = new DateTime(2022, 1, 24, 16, 55, 35, 771, DateTimeKind.Local).AddTicks(505),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "27993cee-c5ab-4f6c-886d-e7bb68d23d6e",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "cea6a9c3-7a24-4b87-bb77-943787cbd25c",
                            TimeStamp = new DateTime(2022, 1, 24, 11, 55, 35, 771, DateTimeKind.Local).AddTicks(527),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "e85fc14c-5502-48f9-8cd4-109180cc1432",
                            Content = "lol noob",
                            ThreadId = "cea6a9c3-7a24-4b87-bb77-943787cbd25c",
                            TimeStamp = new DateTime(2022, 1, 24, 15, 55, 35, 771, DateTimeKind.Local).AddTicks(534),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "0a0cecc1-7d3d-44d7-9abf-eee43ace7cb9",
                            Content = "COME 1V1 ME",
                            ThreadId = "cea6a9c3-7a24-4b87-bb77-943787cbd25c",
                            TimeStamp = new DateTime(2022, 1, 24, 17, 55, 35, 771, DateTimeKind.Local).AddTicks(540),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "cd0f31c0-2168-45d5-ac21-db26721e50c5",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "f84b9af1-0d3f-479c-8c68-de766d57d4d6",
                            TimeStamp = new DateTime(2022, 1, 24, 11, 55, 35, 771, DateTimeKind.Local).AddTicks(554),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "6729f8fb-c5a4-4438-9ec3-61758365d71a",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "f84b9af1-0d3f-479c-8c68-de766d57d4d6",
                            TimeStamp = new DateTime(2022, 1, 24, 13, 55, 35, 771, DateTimeKind.Local).AddTicks(560),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "549a4035-5392-4b84-b082-b44dd65a9180",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "c300c635-dbc3-48ba-8958-01eab50d29ee",
                            Name = "C#"
                        },
                        new
                        {
                            Id = "acb9ae7b-bf09-4da1-92e0-f164ae6da7db",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "9b3b754b-25df-4338-ba5a-e9cf7da3d101",
                            Name = "League of Legends"
                        },
                        new
                        {
                            Id = "b2859d13-433c-45ab-a12a-b89c60fcdf80",
                            Description = "Everything about Minecraft",
                            ForumId = "9b3b754b-25df-4338-ba5a-e9cf7da3d101",
                            Name = "Minecraft"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "c8579023-b05c-40f0-97d5-5c462dd87d2c",
                            SubForumId = "acb9ae7b-bf09-4da1-92e0-f164ae6da7db"
                        },
                        new
                        {
                            GroupId = "c8579023-b05c-40f0-97d5-5c462dd87d2c",
                            SubForumId = "b2859d13-433c-45ab-a12a-b89c60fcdf80"
                        },
                        new
                        {
                            GroupId = "53a802aa-6e59-4f1d-9d79-24a7a0a01c05",
                            SubForumId = "549a4035-5392-4b84-b082-b44dd65a9180"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "7c72e7f2-5e55-4b28-9883-9d67158aba72",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "9ac533d5-60b0-4793-81ef-1d827fa36e4e",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "d78b1bbf-770a-4b6f-acdf-f3c3f7d24cfe",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "78949cce-3c1f-4a37-8c9c-aa422be6b49a",
                            SubForumId = "549a4035-5392-4b84-b082-b44dd65a9180",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 1, 24, 11, 55, 35, 770, DateTimeKind.Local).AddTicks(7848),
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b"
                        },
                        new
                        {
                            Id = "cea6a9c3-7a24-4b87-bb77-943787cbd25c",
                            SubForumId = "acb9ae7b-bf09-4da1-92e0-f164ae6da7db",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 1, 25, 11, 55, 35, 770, DateTimeKind.Local).AddTicks(8202),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        },
                        new
                        {
                            Id = "f84b9af1-0d3f-479c-8c68-de766d57d4d6",
                            SubForumId = "b2859d13-433c-45ab-a12a-b89c60fcdf80",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 1, 24, 17, 55, 35, 770, DateTimeKind.Local).AddTicks(8222),
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b",
                            ConversationId = "a530f177-5f06-4572-bb1a-991bbade2fd8"
                        },
                        new
                        {
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91",
                            ConversationId = "a530f177-5f06-4572-bb1a-991bbade2fd8"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b",
                            GroupId = "c8579023-b05c-40f0-97d5-5c462dd87d2c"
                        },
                        new
                        {
                            UserId = "725c5431-6bf5-42bb-a968-060403ad2e0b",
                            GroupId = "53a802aa-6e59-4f1d-9d79-24a7a0a01c05"
                        },
                        new
                        {
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91",
                            GroupId = "c8579023-b05c-40f0-97d5-5c462dd87d2c"
                        },
                        new
                        {
                            UserId = "4ecaf5ab-ad8b-467e-acf2-8343d4a02b91",
                            GroupId = "53a802aa-6e59-4f1d-9d79-24a7a0a01c05"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
