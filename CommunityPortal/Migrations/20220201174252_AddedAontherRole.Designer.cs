// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220201174252_AddedAontherRole")]
    partial class AddedAontherRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "7d480373-51c9-4460-b92e-b586663313f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9de54a28-1589-4ac0-8b30-eb690f1e8896",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMvY+tUE6IBQsdybvXcYDPMRcHDzPOjCQOpbZOtDPpIUlFcEotbMUXQoKu8+llHFLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ab28ec0-c2a4-4143-bf00-3521de95804a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "384dba04-c496-4295-9349-c0b2cd1999e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a424bcd2-1f2d-478e-b670-0fd91a0bf1cb",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPA1BAIHYZe9U3i3bntt6+xWuvMvS45OmKtaYJMlVfNe4tIncKcTNwfGd45JRNccgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98bba1ba-b559-4672-9798-58be9f514be2",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "5633e885-95e2-4644-aeb4-f745ffdbde11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72d04d32-9418-4d42-8c64-aab40ee876ca",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKZU/VzMrn8dKm0VQ3m8t3GjDPFYLgq3sKKhMnF6zO7vW2pOEgOXfa1hyy+Cz0m5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b35a4450-e0f9-40a9-9d6b-8ac894fdfb98",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "bb334afe-83d4-4581-94df-2d0525538aae",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "6f6f4edd-ffa4-4162-8d60-f691f543f525",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "bb334afe-83d4-4581-94df-2d0525538aae",
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            CategoryId = "6f6f4edd-ffa4-4162-8d60-f691f543f525",
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            CategoryId = "6f6f4edd-ffa4-4162-8d60-f691f543f525",
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "3eb24adf-a022-42f2-92b4-346b3ca06331",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "f745604d-b2d3-46cb-bb63-caa49e5c34e3",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 2, 4, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(1578),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 2, 1, 18, 42, 52, 96, DateTimeKind.Local).AddTicks(236),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "a768494f-6be7-439f-9b2b-2107b2591b37",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 11, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(2030),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 2, 1, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(2009),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "4d9152fa-3900-42b8-8d06-13513a1d1411",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "bacae451-46cf-4b55-9b90-33f40a7e9410",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "0d076863-405d-4f02-9952-b728e5888254",
                            Name = "Gamers",
                            OwnerId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "2376472b-45bd-45f6-9e4f-ba9d731c9e97",
                            Name = "Programmers",
                            OwnerId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "a1004d2f-1214-47a1-b149-8e0ecf210446",
                            Name = "General",
                            OwnerId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "35d88bd8-bd5b-41ef-98e5-64dc36d9e82c",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "3eb24adf-a022-42f2-92b4-346b3ca06331",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(6350),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "3da8676b-af01-4821-b93d-baf9eab66dc8",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "3eb24adf-a022-42f2-92b4-346b3ca06331",
                            TimeStamp = new DateTime(2022, 2, 1, 21, 42, 52, 98, DateTimeKind.Local).AddTicks(6678),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "423f7313-d83f-47ba-9ce0-29b69583742e",
                            CategoryId = "bb334afe-83d4-4581-94df-2d0525538aae",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 2, 1, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(8251),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "d02f67bf-35bf-4be7-9146-0891a4c2e3bb",
                            CategoryId = "6f6f4edd-ffa4-4162-8d60-f691f543f525",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 2, 1, 18, 42, 52, 98, DateTimeKind.Local).AddTicks(8591),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "423f7313-d83f-47ba-9ce0-29b69583742e",
                            TagId = "2d4a304a-d4c9-4557-b8d6-ebae44a7f090"
                        },
                        new
                        {
                            PostId = "423f7313-d83f-47ba-9ce0-29b69583742e",
                            TagId = "0bea8d44-34a8-4cf6-a986-c71f62055ced"
                        },
                        new
                        {
                            PostId = "d02f67bf-35bf-4be7-9146-0891a4c2e3bb",
                            TagId = "2d4a304a-d4c9-4557-b8d6-ebae44a7f090"
                        },
                        new
                        {
                            PostId = "d02f67bf-35bf-4be7-9146-0891a4c2e3bb",
                            TagId = "9c000d20-6b61-499b-8d9f-211ebda4a45d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "4775103d-66cc-4a1a-a413-d4ed6139d4f8",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "26ff131d-8aa9-4407-9a56-27f2a60e1519",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 42, 52, 99, DateTimeKind.Local).AddTicks(7509),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "19cc3150-a271-42af-a676-18defbaa8e41",
                            Content = "Use google.",
                            ThreadId = "26ff131d-8aa9-4407-9a56-27f2a60e1519",
                            TimeStamp = new DateTime(2022, 2, 1, 23, 42, 52, 99, DateTimeKind.Local).AddTicks(7826),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "8710ab85-ef32-4d61-a05e-21a8c2ca0d9e",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "599e309a-9658-42cf-b588-6d84bf2d78f4",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 42, 52, 99, DateTimeKind.Local).AddTicks(7847),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "dee605a7-1b25-4e72-b231-df1aea1743c9",
                            Content = "lol noob",
                            ThreadId = "599e309a-9658-42cf-b588-6d84bf2d78f4",
                            TimeStamp = new DateTime(2022, 2, 1, 22, 42, 52, 99, DateTimeKind.Local).AddTicks(7854),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "939dfaa4-c421-4d44-8eec-b4dcbf709807",
                            Content = "COME 1V1 ME",
                            ThreadId = "599e309a-9658-42cf-b588-6d84bf2d78f4",
                            TimeStamp = new DateTime(2022, 2, 2, 0, 42, 52, 99, DateTimeKind.Local).AddTicks(7860),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "6099dce2-0c37-4214-91c8-5ea18574b38b",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "b26ae145-c7ef-4337-9b3e-dbf8fbcef1e4",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 42, 52, 99, DateTimeKind.Local).AddTicks(7869),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "c2ab7ec2-e8c8-48ad-9f40-893d4f1b708c",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "b26ae145-c7ef-4337-9b3e-dbf8fbcef1e4",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 42, 52, 99, DateTimeKind.Local).AddTicks(7874),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "33bd95b2-946c-43ee-b34d-e587c40ebd83",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "4d9152fa-3900-42b8-8d06-13513a1d1411",
                            Name = "C#",
                            OwnerId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "8b4cca06-3b23-453d-90b7-b375e8d905d0",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "bacae451-46cf-4b55-9b90-33f40a7e9410",
                            Name = "League of Legends",
                            OwnerId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "e475f2d3-bb56-4b02-bd76-06d7eb15986f",
                            Description = "Everything about Minecraft",
                            ForumId = "bacae451-46cf-4b55-9b90-33f40a7e9410",
                            Name = "Minecraft",
                            OwnerId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "0d076863-405d-4f02-9952-b728e5888254",
                            SubForumId = "8b4cca06-3b23-453d-90b7-b375e8d905d0"
                        },
                        new
                        {
                            GroupId = "0d076863-405d-4f02-9952-b728e5888254",
                            SubForumId = "e475f2d3-bb56-4b02-bd76-06d7eb15986f"
                        },
                        new
                        {
                            GroupId = "2376472b-45bd-45f6-9e4f-ba9d731c9e97",
                            SubForumId = "33bd95b2-946c-43ee-b34d-e587c40ebd83"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "2d4a304a-d4c9-4557-b8d6-ebae44a7f090",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "0bea8d44-34a8-4cf6-a986-c71f62055ced",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "9c000d20-6b61-499b-8d9f-211ebda4a45d",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "26ff131d-8aa9-4407-9a56-27f2a60e1519",
                            SubForumId = "33bd95b2-946c-43ee-b34d-e587c40ebd83",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 42, 52, 99, DateTimeKind.Local).AddTicks(5571),
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7"
                        },
                        new
                        {
                            Id = "599e309a-9658-42cf-b588-6d84bf2d78f4",
                            SubForumId = "8b4cca06-3b23-453d-90b7-b375e8d905d0",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 2, 2, 18, 42, 52, 99, DateTimeKind.Local).AddTicks(5889),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        },
                        new
                        {
                            Id = "b26ae145-c7ef-4337-9b3e-dbf8fbcef1e4",
                            SubForumId = "e475f2d3-bb56-4b02-bd76-06d7eb15986f",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 2, 2, 0, 42, 52, 99, DateTimeKind.Local).AddTicks(5914),
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7",
                            ConversationId = "3eb24adf-a022-42f2-92b4-346b3ca06331"
                        },
                        new
                        {
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11",
                            ConversationId = "3eb24adf-a022-42f2-92b4-346b3ca06331"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7",
                            GroupId = "0d076863-405d-4f02-9952-b728e5888254"
                        },
                        new
                        {
                            UserId = "384dba04-c496-4295-9349-c0b2cd1999e7",
                            GroupId = "2376472b-45bd-45f6-9e4f-ba9d731c9e97"
                        },
                        new
                        {
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11",
                            GroupId = "0d076863-405d-4f02-9952-b728e5888254"
                        },
                        new
                        {
                            UserId = "5633e885-95e2-4644-aeb4-f745ffdbde11",
                            GroupId = "2376472b-45bd-45f6-9e4f-ba9d731c9e97"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ec4f0751-2622-44cf-b65d-eb11d06bcabe",
                            ConcurrencyStamp = "aca4dac8-c2d5-417b-8a4a-c5322e089d36",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f1951b40-476c-4a7e-abec-2c66b0498ecd",
                            ConcurrencyStamp = "647c6ae2-3e71-4867-99ca-531d68144fbc",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "7d480373-51c9-4460-b92e-b586663313f9",
                            RoleId = "ec4f0751-2622-44cf-b65d-eb11d06bcabe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Reply", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
