// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220112153103_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c780c8c-f73e-4fb0-9b99-030ce614e7e7",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAELZ0D9z+jWyHVA5/IMhCSIMx6+Xn73GbtbAzra5DywqpVl0Dtn4XdUxmZYaLp9V25g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8249e95b-fa09-4b7b-bab2-fc01794d8ec6",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "e0a3a264-a986-424e-8a47-724c5d0d693d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "664ad2d4-cabc-4ef0-93cf-d8822359c1f2",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjnIqwJDLMXGnm/AhpU8Q/qurFz6grn6miUHjhW1R2yxT6TBShj8hBBkHIU4iVQaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59047323-5ff4-4e28-abff-ef7e18b5da19",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "01dcb37d-5eff-48e8-afd0-3609461f6ea5",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "47929a0b-2eeb-44ae-8786-f567c5a80e87",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "01dcb37d-5eff-48e8-afd0-3609461f6ea5",
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            CategoryId = "47929a0b-2eeb-44ae-8786-f567c5a80e87",
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            CategoryId = "47929a0b-2eeb-44ae-8786-f567c5a80e87",
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "34475f28-5d5c-401a-a171-f3eacd1d33a8",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "6bbdd8d6-1e74-40dd-97a8-379d5deb5fcf",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 1, 15, 16, 31, 2, 593, DateTimeKind.Local).AddTicks(9116),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 1, 12, 16, 31, 2, 591, DateTimeKind.Local).AddTicks(7073),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "d0abed98-1a0d-4718-91a9-7f32a8f896a2",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 1, 22, 16, 31, 2, 593, DateTimeKind.Local).AddTicks(9572),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 1, 12, 16, 31, 2, 593, DateTimeKind.Local).AddTicks(9554),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "bd292718-4b83-4184-ab3c-945d439514cd",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "664d2b4e-336c-40f8-9053-fcc58fbabb62",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "3594104c-a45d-47f4-b75a-6690fa6f469b",
                            Name = "Gamers"
                        },
                        new
                        {
                            Id = "ece46808-974c-40f3-ae90-e44245eab2d1",
                            Name = "Programmers"
                        },
                        new
                        {
                            Id = "edb84255-9b2e-4924-b807-794ac7392f9a",
                            Name = "General"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "a1f4bd4a-bda1-4156-90bc-d0bc6170f4c7",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "34475f28-5d5c-401a-a171-f3eacd1d33a8",
                            TimeStamp = new DateTime(2022, 1, 12, 16, 31, 2, 594, DateTimeKind.Local).AddTicks(4199),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "7337fc8e-a46f-4875-8f5b-5b3225b8d934",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "34475f28-5d5c-401a-a171-f3eacd1d33a8",
                            TimeStamp = new DateTime(2022, 1, 12, 19, 31, 2, 594, DateTimeKind.Local).AddTicks(4574),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "c498f616-934a-4514-afe1-e1ad3e20faf2",
                            CategoryId = "01dcb37d-5eff-48e8-afd0-3609461f6ea5",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 1, 12, 16, 31, 2, 594, DateTimeKind.Local).AddTicks(6701),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "d79dad39-f725-4719-9b18-af0e52cb89ef",
                            CategoryId = "47929a0b-2eeb-44ae-8786-f567c5a80e87",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 1, 14, 5, 31, 2, 594, DateTimeKind.Local).AddTicks(7092),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "c498f616-934a-4514-afe1-e1ad3e20faf2",
                            TagId = "c4ee163c-c001-4a7f-aa52-ad460c0d263b"
                        },
                        new
                        {
                            PostId = "c498f616-934a-4514-afe1-e1ad3e20faf2",
                            TagId = "a3b545f4-ec02-49b6-90d6-bdeb18144672"
                        },
                        new
                        {
                            PostId = "d79dad39-f725-4719-9b18-af0e52cb89ef",
                            TagId = "c4ee163c-c001-4a7f-aa52-ad460c0d263b"
                        },
                        new
                        {
                            PostId = "d79dad39-f725-4719-9b18-af0e52cb89ef",
                            TagId = "67f2678f-a441-42ef-912c-5323a0a06c22"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "635175e0-310b-417c-bc6b-3529b2785c95",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "de438842-e6ba-43c2-a8df-1491d067f1b8",
                            TimeStamp = new DateTime(2022, 1, 12, 16, 31, 2, 595, DateTimeKind.Local).AddTicks(7958),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "1bda4319-0df3-4eb1-9f37-fd3844bd093d",
                            Content = "Use google.",
                            ThreadId = "de438842-e6ba-43c2-a8df-1491d067f1b8",
                            TimeStamp = new DateTime(2022, 1, 12, 21, 31, 2, 595, DateTimeKind.Local).AddTicks(8371),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        },
                        new
                        {
                            Id = "29ab1ada-c16f-44b4-987d-052697ff7fc9",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "bb0fb979-e9d2-4800-b845-ecebfe6f831f",
                            TimeStamp = new DateTime(2022, 1, 12, 16, 31, 2, 595, DateTimeKind.Local).AddTicks(8396),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        },
                        new
                        {
                            Id = "cb364747-fbd2-4d01-a36b-e500b46ccdd9",
                            Content = "lol noob",
                            ThreadId = "bb0fb979-e9d2-4800-b845-ecebfe6f831f",
                            TimeStamp = new DateTime(2022, 1, 12, 20, 31, 2, 595, DateTimeKind.Local).AddTicks(8403),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "7b33d0aa-f5d3-4208-90b7-45b5255b2a61",
                            Content = "COME 1V1 ME",
                            ThreadId = "bb0fb979-e9d2-4800-b845-ecebfe6f831f",
                            TimeStamp = new DateTime(2022, 1, 12, 22, 31, 2, 595, DateTimeKind.Local).AddTicks(8410),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        },
                        new
                        {
                            Id = "c0a83f42-7dfd-4fc5-92fd-0fde7d55fdb5",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "aff783e6-b55a-41cb-b9c5-258d75236b6d",
                            TimeStamp = new DateTime(2022, 1, 12, 16, 31, 2, 595, DateTimeKind.Local).AddTicks(8420),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        },
                        new
                        {
                            Id = "8a0d2821-5d21-49c5-9431-407d7d98c702",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "aff783e6-b55a-41cb-b9c5-258d75236b6d",
                            TimeStamp = new DateTime(2022, 1, 12, 18, 31, 2, 595, DateTimeKind.Local).AddTicks(8431),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "79afe1e3-5e1f-4431-88ea-f7475ac2899d",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "bd292718-4b83-4184-ab3c-945d439514cd",
                            Name = "C#"
                        },
                        new
                        {
                            Id = "f245c60a-703b-4070-aa29-e0fa5deb8c4c",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "664d2b4e-336c-40f8-9053-fcc58fbabb62",
                            Name = "League of Legends"
                        },
                        new
                        {
                            Id = "4b8f1dc3-f999-4a39-9c29-a671c4cfb5b1",
                            Description = "Everything about Minecraft",
                            ForumId = "664d2b4e-336c-40f8-9053-fcc58fbabb62",
                            Name = "Minecraft"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "3594104c-a45d-47f4-b75a-6690fa6f469b",
                            SubForumId = "f245c60a-703b-4070-aa29-e0fa5deb8c4c"
                        },
                        new
                        {
                            GroupId = "3594104c-a45d-47f4-b75a-6690fa6f469b",
                            SubForumId = "4b8f1dc3-f999-4a39-9c29-a671c4cfb5b1"
                        },
                        new
                        {
                            GroupId = "ece46808-974c-40f3-ae90-e44245eab2d1",
                            SubForumId = "79afe1e3-5e1f-4431-88ea-f7475ac2899d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "c4ee163c-c001-4a7f-aa52-ad460c0d263b",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "a3b545f4-ec02-49b6-90d6-bdeb18144672",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "67f2678f-a441-42ef-912c-5323a0a06c22",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "de438842-e6ba-43c2-a8df-1491d067f1b8",
                            SubForumId = "79afe1e3-5e1f-4431-88ea-f7475ac2899d",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 1, 12, 16, 31, 2, 595, DateTimeKind.Local).AddTicks(5475),
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990"
                        },
                        new
                        {
                            Id = "bb0fb979-e9d2-4800-b845-ecebfe6f831f",
                            SubForumId = "f245c60a-703b-4070-aa29-e0fa5deb8c4c",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 1, 13, 16, 31, 2, 595, DateTimeKind.Local).AddTicks(5845),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        },
                        new
                        {
                            Id = "aff783e6-b55a-41cb-b9c5-258d75236b6d",
                            SubForumId = "4b8f1dc3-f999-4a39-9c29-a671c4cfb5b1",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 1, 12, 22, 31, 2, 595, DateTimeKind.Local).AddTicks(5866),
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990",
                            ConversationId = "34475f28-5d5c-401a-a171-f3eacd1d33a8"
                        },
                        new
                        {
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d",
                            ConversationId = "34475f28-5d5c-401a-a171-f3eacd1d33a8"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990",
                            GroupId = "3594104c-a45d-47f4-b75a-6690fa6f469b"
                        },
                        new
                        {
                            UserId = "5bc04d0b-a62e-416b-aa93-d5baa5ecd990",
                            GroupId = "ece46808-974c-40f3-ae90-e44245eab2d1"
                        },
                        new
                        {
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d",
                            GroupId = "3594104c-a45d-47f4-b75a-6690fa6f469b"
                        },
                        new
                        {
                            UserId = "e0a3a264-a986-424e-8a47-724c5d0d693d",
                            GroupId = "ece46808-974c-40f3-ae90-e44245eab2d1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
