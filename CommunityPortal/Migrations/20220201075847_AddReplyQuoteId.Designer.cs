// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220201075847_AddReplyQuoteId")]
    partial class AddReplyQuoteId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "01a32623-8082-4788-a4a7-9b73a730d5bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9861ba36-ae02-4e88-82ad-477bfa91e2be",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAELfUx0LfM4y03OGuRARNQRLznODXV8z3CXITvRUnQwQFxhUygceLfpgRiPEhiMhkNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3dd9edc-4183-42dd-a136-bf55b88a4f72",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "236be921-b65f-46fe-b230-8ee29b693a92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2419ddf3-3be0-4925-8566-3239497b197a",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEM2LFhRLrASeYf1TXhpoNcNUfbA6roB6eLr80g4t7dcsRIMalVPkpVbfEMYpFfc4Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01e3ae59-605d-49db-9454-9ed78da73397",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "c4e83028-14b3-48f7-8aaf-12401d74014e",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "cf3836b5-4520-4a3a-9851-13f132f53c78",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "c4e83028-14b3-48f7-8aaf-12401d74014e",
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            CategoryId = "cf3836b5-4520-4a3a-9851-13f132f53c78",
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            CategoryId = "cf3836b5-4520-4a3a-9851-13f132f53c78",
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "29ffa4c2-9bb4-4b8c-98ea-30099a7c1d89",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "f1fbb65f-1036-4a59-b5e5-33534bc2cd2d",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 2, 4, 8, 58, 47, 16, DateTimeKind.Local).AddTicks(4093),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 2, 1, 8, 58, 47, 14, DateTimeKind.Local).AddTicks(2588),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "bf589935-33c0-449d-8cf2-f61318fe1666",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 11, 8, 58, 47, 16, DateTimeKind.Local).AddTicks(4572),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 2, 1, 8, 58, 47, 16, DateTimeKind.Local).AddTicks(4553),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "f190b974-fed7-4fa2-8e9c-4d25263ee14f",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "ab35ae61-d958-4f58-b4c1-319973c4b30d",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "eba6eb00-34ac-48e2-9e63-054dcfddb1fa",
                            Name = "Gamers",
                            OwnerId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "b2694a4d-9fef-48d5-a6b1-f1e9f4ba8a75",
                            Name = "Programmers",
                            OwnerId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "cef34078-3f72-49b1-b091-1557f4b8e7a3",
                            Name = "General",
                            OwnerId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "65a9f376-7ca4-4901-8954-9fbc2e57be7f",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "29ffa4c2-9bb4-4b8c-98ea-30099a7c1d89",
                            TimeStamp = new DateTime(2022, 2, 1, 8, 58, 47, 16, DateTimeKind.Local).AddTicks(9499),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "45347ab9-d2fd-41ff-bc36-c363d951983f",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "29ffa4c2-9bb4-4b8c-98ea-30099a7c1d89",
                            TimeStamp = new DateTime(2022, 2, 1, 11, 58, 47, 16, DateTimeKind.Local).AddTicks(9872),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "e16cd3ac-e293-4711-a69b-98121ef867e1",
                            CategoryId = "c4e83028-14b3-48f7-8aaf-12401d74014e",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 2, 1, 8, 58, 47, 17, DateTimeKind.Local).AddTicks(1811),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "80ff963c-aab2-4d59-ac28-b85b2a9df37f",
                            CategoryId = "cf3836b5-4520-4a3a-9851-13f132f53c78",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 2, 2, 21, 58, 47, 17, DateTimeKind.Local).AddTicks(2189),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "e16cd3ac-e293-4711-a69b-98121ef867e1",
                            TagId = "a829d159-438b-45bd-89dd-5668a5b8f8d6"
                        },
                        new
                        {
                            PostId = "e16cd3ac-e293-4711-a69b-98121ef867e1",
                            TagId = "056765f1-0603-4c62-83b5-b757bfceeee8"
                        },
                        new
                        {
                            PostId = "80ff963c-aab2-4d59-ac28-b85b2a9df37f",
                            TagId = "a829d159-438b-45bd-89dd-5668a5b8f8d6"
                        },
                        new
                        {
                            PostId = "80ff963c-aab2-4d59-ac28-b85b2a9df37f",
                            TagId = "64a0ff13-4e7a-444c-90e3-1a98b8d46909"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "fd47352f-1725-4d40-9f8d-1e9a6c3e2847",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "325afe2b-5f2a-4823-ba46-c4a3b3d53a8a",
                            TimeStamp = new DateTime(2022, 2, 1, 8, 58, 47, 18, DateTimeKind.Local).AddTicks(3102),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "73f79481-0491-4d8b-8765-f89def1c801c",
                            Content = "Use google.",
                            ThreadId = "325afe2b-5f2a-4823-ba46-c4a3b3d53a8a",
                            TimeStamp = new DateTime(2022, 2, 1, 13, 58, 47, 18, DateTimeKind.Local).AddTicks(3473),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "6b8f4642-2048-4bde-9df6-a0efe0176223",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "54cca2d8-5bfc-4fa5-b73f-37c03a4c3ecc",
                            TimeStamp = new DateTime(2022, 2, 1, 8, 58, 47, 18, DateTimeKind.Local).AddTicks(3496),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "6f81f5f3-0052-4d7c-a15b-dcc3fd73e6f2",
                            Content = "lol noob",
                            ThreadId = "54cca2d8-5bfc-4fa5-b73f-37c03a4c3ecc",
                            TimeStamp = new DateTime(2022, 2, 1, 12, 58, 47, 18, DateTimeKind.Local).AddTicks(3503),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "5cf80d8f-19ca-480c-9a09-eef25205ff1a",
                            Content = "COME 1V1 ME",
                            ThreadId = "54cca2d8-5bfc-4fa5-b73f-37c03a4c3ecc",
                            TimeStamp = new DateTime(2022, 2, 1, 14, 58, 47, 18, DateTimeKind.Local).AddTicks(3510),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "b0a3fe22-517b-4186-89de-0030c502fa31",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "ba838924-f7c9-49f2-9bd9-b97e4b6b6bbf",
                            TimeStamp = new DateTime(2022, 2, 1, 8, 58, 47, 18, DateTimeKind.Local).AddTicks(3520),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "9fab24d2-f273-4e00-8481-e8575d5fe127",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "ba838924-f7c9-49f2-9bd9-b97e4b6b6bbf",
                            TimeStamp = new DateTime(2022, 2, 1, 10, 58, 47, 18, DateTimeKind.Local).AddTicks(3527),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "9c2ab6ef-f0ec-467a-93d6-431506bf477b",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "f190b974-fed7-4fa2-8e9c-4d25263ee14f",
                            Name = "C#",
                            OwnerId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "3b7d4676-8cd4-4503-8663-ff6a9425fb78",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "ab35ae61-d958-4f58-b4c1-319973c4b30d",
                            Name = "League of Legends",
                            OwnerId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "8d4e0fe5-bcde-47ab-bb5e-a795776c94ce",
                            Description = "Everything about Minecraft",
                            ForumId = "ab35ae61-d958-4f58-b4c1-319973c4b30d",
                            Name = "Minecraft",
                            OwnerId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "eba6eb00-34ac-48e2-9e63-054dcfddb1fa",
                            SubForumId = "3b7d4676-8cd4-4503-8663-ff6a9425fb78"
                        },
                        new
                        {
                            GroupId = "eba6eb00-34ac-48e2-9e63-054dcfddb1fa",
                            SubForumId = "8d4e0fe5-bcde-47ab-bb5e-a795776c94ce"
                        },
                        new
                        {
                            GroupId = "b2694a4d-9fef-48d5-a6b1-f1e9f4ba8a75",
                            SubForumId = "9c2ab6ef-f0ec-467a-93d6-431506bf477b"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "a829d159-438b-45bd-89dd-5668a5b8f8d6",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "056765f1-0603-4c62-83b5-b757bfceeee8",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "64a0ff13-4e7a-444c-90e3-1a98b8d46909",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "325afe2b-5f2a-4823-ba46-c4a3b3d53a8a",
                            SubForumId = "9c2ab6ef-f0ec-467a-93d6-431506bf477b",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 2, 1, 8, 58, 47, 18, DateTimeKind.Local).AddTicks(710),
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb"
                        },
                        new
                        {
                            Id = "54cca2d8-5bfc-4fa5-b73f-37c03a4c3ecc",
                            SubForumId = "3b7d4676-8cd4-4503-8663-ff6a9425fb78",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 2, 2, 8, 58, 47, 18, DateTimeKind.Local).AddTicks(1069),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        },
                        new
                        {
                            Id = "ba838924-f7c9-49f2-9bd9-b97e4b6b6bbf",
                            SubForumId = "8d4e0fe5-bcde-47ab-bb5e-a795776c94ce",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 2, 1, 14, 58, 47, 18, DateTimeKind.Local).AddTicks(1130),
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb",
                            ConversationId = "29ffa4c2-9bb4-4b8c-98ea-30099a7c1d89"
                        },
                        new
                        {
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92",
                            ConversationId = "29ffa4c2-9bb4-4b8c-98ea-30099a7c1d89"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb",
                            GroupId = "eba6eb00-34ac-48e2-9e63-054dcfddb1fa"
                        },
                        new
                        {
                            UserId = "01a32623-8082-4788-a4a7-9b73a730d5bb",
                            GroupId = "b2694a4d-9fef-48d5-a6b1-f1e9f4ba8a75"
                        },
                        new
                        {
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92",
                            GroupId = "eba6eb00-34ac-48e2-9e63-054dcfddb1fa"
                        },
                        new
                        {
                            UserId = "236be921-b65f-46fe-b230-8ee29b693a92",
                            GroupId = "b2694a4d-9fef-48d5-a6b1-f1e9f4ba8a75"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
