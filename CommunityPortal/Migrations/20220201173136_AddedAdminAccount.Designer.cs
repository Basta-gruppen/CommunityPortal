// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220201173136_AddedAdminAccount")]
    partial class AddedAdminAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "098503ec-109a-4d37-b9e7-4d8f3c84159d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "976b70cc-94e2-42d5-ba3c-5d58bb7cb7a4",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHuvykjwTdBLI9nuuqLEwoMXYqSYTieJh+mkcvaChkna4mzjNr25gfKrMhCr/76zug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bef2660-2b44-4143-ab6a-789cac7f9d67",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19ed66aa-0fb1-42bd-a442-4985bb001d77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a5aa7ab-3e49-4656-a291-b9bf0a2b7cf1",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAECzEhOz7sZwNkS/21fQ0p9KGheIxHhXwn9FeweU9+H8ve73gRGbWmAVLM6q0F4idsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b3aea39-955a-4ecf-ab2d-c8b9b6362c81",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "f5d89a9e-c88d-4821-a036-0ec05b565b8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "041f0512-3d26-40da-9ccb-7a07e805bfcb",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEC1UVYD5frmOs3mumuT4giHB5mRmfpws1o7Xda2lgbdS/67T8ks3BjvYc5muweOUuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1840632-a542-4bc8-b5ce-3019cb0c975e",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "566ee0dd-bcf1-4f8b-b75c-df0b910d1e21",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "16de1972-b89c-46dd-9651-74a9afeba990",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "566ee0dd-bcf1-4f8b-b75c-df0b910d1e21",
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            CategoryId = "16de1972-b89c-46dd-9651-74a9afeba990",
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            CategoryId = "16de1972-b89c-46dd-9651-74a9afeba990",
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "ae2eab92-c2e2-4adb-bbd0-bb3ac4bb4c3a",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "983503e8-4b8f-47f2-a8a2-04b380eda2e0",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 2, 4, 18, 31, 36, 163, DateTimeKind.Local).AddTicks(1524),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 2, 1, 18, 31, 36, 160, DateTimeKind.Local).AddTicks(8803),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "cfed2bdf-1e5b-436b-842e-d37888eeb6be",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 11, 18, 31, 36, 163, DateTimeKind.Local).AddTicks(2019),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 2, 1, 18, 31, 36, 163, DateTimeKind.Local).AddTicks(2000),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "fb5a714e-3d96-433a-8e30-7f7e24ac9974",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "ee192e32-4f8b-4788-a892-338aa14095c3",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "4acf3fd3-872c-493f-a8fa-d38330d2428a",
                            Name = "Gamers",
                            OwnerId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "6869c3f4-af50-400e-9c5f-d04c6bc0a307",
                            Name = "Programmers",
                            OwnerId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "1ac41ae7-00ec-49d6-92e9-177893a3f5e9",
                            Name = "General",
                            OwnerId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "5ee9cb21-1b34-448f-9d12-4e4a0c2d5176",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "ae2eab92-c2e2-4adb-bbd0-bb3ac4bb4c3a",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 31, 36, 163, DateTimeKind.Local).AddTicks(7286),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "a39ddb77-e54c-4ea2-9188-ce7333317713",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "ae2eab92-c2e2-4adb-bbd0-bb3ac4bb4c3a",
                            TimeStamp = new DateTime(2022, 2, 1, 21, 31, 36, 163, DateTimeKind.Local).AddTicks(7664),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "325109a0-6c70-4397-91b6-52c10af1ab53",
                            CategoryId = "566ee0dd-bcf1-4f8b-b75c-df0b910d1e21",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 2, 1, 18, 31, 36, 163, DateTimeKind.Local).AddTicks(9637),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "d9217d90-0303-4d5f-bf77-dc2140b28c91",
                            CategoryId = "16de1972-b89c-46dd-9651-74a9afeba990",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 2, 1, 18, 31, 36, 164, DateTimeKind.Local).AddTicks(21),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "325109a0-6c70-4397-91b6-52c10af1ab53",
                            TagId = "fae1bc3f-eae9-4291-8249-ca7f5ae02f44"
                        },
                        new
                        {
                            PostId = "325109a0-6c70-4397-91b6-52c10af1ab53",
                            TagId = "8a442e4c-ba34-4ac3-9d5d-166310128dec"
                        },
                        new
                        {
                            PostId = "d9217d90-0303-4d5f-bf77-dc2140b28c91",
                            TagId = "fae1bc3f-eae9-4291-8249-ca7f5ae02f44"
                        },
                        new
                        {
                            PostId = "d9217d90-0303-4d5f-bf77-dc2140b28c91",
                            TagId = "78fe6256-ebce-4165-8eb9-1b50b55f4fb6"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "3188d726-7a40-4f83-970b-7fc0553d023c",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "7f3da049-b83c-4565-9de4-5dd2a5d9400a",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 31, 36, 165, DateTimeKind.Local).AddTicks(1031),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "fd7841a8-bfc8-4d44-a439-50c0f9cb5009",
                            Content = "Use google.",
                            ThreadId = "7f3da049-b83c-4565-9de4-5dd2a5d9400a",
                            TimeStamp = new DateTime(2022, 2, 1, 23, 31, 36, 165, DateTimeKind.Local).AddTicks(1405),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "6add5138-345c-45cc-aad5-03767b6365cc",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "504763e7-2d27-42d0-b6c3-16625cb3acc6",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 31, 36, 165, DateTimeKind.Local).AddTicks(1427),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "c393453f-a2d4-40d9-b2d3-e27651be4760",
                            Content = "lol noob",
                            ThreadId = "504763e7-2d27-42d0-b6c3-16625cb3acc6",
                            TimeStamp = new DateTime(2022, 2, 1, 22, 31, 36, 165, DateTimeKind.Local).AddTicks(1434),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "289bf0f7-33b1-4eb0-9fc0-bd2a0765a1b1",
                            Content = "COME 1V1 ME",
                            ThreadId = "504763e7-2d27-42d0-b6c3-16625cb3acc6",
                            TimeStamp = new DateTime(2022, 2, 2, 0, 31, 36, 165, DateTimeKind.Local).AddTicks(1441),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "cce6bb46-50cf-4730-ba90-43ba601160fa",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "205d8072-38fa-4c6d-acee-2f0ad1799bb2",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 31, 36, 165, DateTimeKind.Local).AddTicks(1455),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "ae46805c-2837-49eb-8a7c-ab8ddf305575",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "205d8072-38fa-4c6d-acee-2f0ad1799bb2",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 31, 36, 165, DateTimeKind.Local).AddTicks(1462),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "9ab7b6ec-cfec-435b-ba62-7704d2f29e89",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "fb5a714e-3d96-433a-8e30-7f7e24ac9974",
                            Name = "C#",
                            OwnerId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "b0b983ed-f54e-48c8-9036-eb3662de2eee",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "ee192e32-4f8b-4788-a892-338aa14095c3",
                            Name = "League of Legends",
                            OwnerId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "96a75232-8a1e-4529-b8ef-d35c42c9d14d",
                            Description = "Everything about Minecraft",
                            ForumId = "ee192e32-4f8b-4788-a892-338aa14095c3",
                            Name = "Minecraft",
                            OwnerId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "4acf3fd3-872c-493f-a8fa-d38330d2428a",
                            SubForumId = "b0b983ed-f54e-48c8-9036-eb3662de2eee"
                        },
                        new
                        {
                            GroupId = "4acf3fd3-872c-493f-a8fa-d38330d2428a",
                            SubForumId = "96a75232-8a1e-4529-b8ef-d35c42c9d14d"
                        },
                        new
                        {
                            GroupId = "6869c3f4-af50-400e-9c5f-d04c6bc0a307",
                            SubForumId = "9ab7b6ec-cfec-435b-ba62-7704d2f29e89"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "fae1bc3f-eae9-4291-8249-ca7f5ae02f44",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "8a442e4c-ba34-4ac3-9d5d-166310128dec",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "78fe6256-ebce-4165-8eb9-1b50b55f4fb6",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "7f3da049-b83c-4565-9de4-5dd2a5d9400a",
                            SubForumId = "9ab7b6ec-cfec-435b-ba62-7704d2f29e89",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 2, 1, 18, 31, 36, 164, DateTimeKind.Local).AddTicks(8684),
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77"
                        },
                        new
                        {
                            Id = "504763e7-2d27-42d0-b6c3-16625cb3acc6",
                            SubForumId = "b0b983ed-f54e-48c8-9036-eb3662de2eee",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 2, 2, 18, 31, 36, 164, DateTimeKind.Local).AddTicks(9054),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        },
                        new
                        {
                            Id = "205d8072-38fa-4c6d-acee-2f0ad1799bb2",
                            SubForumId = "96a75232-8a1e-4529-b8ef-d35c42c9d14d",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 2, 2, 0, 31, 36, 164, DateTimeKind.Local).AddTicks(9077),
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77",
                            ConversationId = "ae2eab92-c2e2-4adb-bbd0-bb3ac4bb4c3a"
                        },
                        new
                        {
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f",
                            ConversationId = "ae2eab92-c2e2-4adb-bbd0-bb3ac4bb4c3a"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77",
                            GroupId = "4acf3fd3-872c-493f-a8fa-d38330d2428a"
                        },
                        new
                        {
                            UserId = "19ed66aa-0fb1-42bd-a442-4985bb001d77",
                            GroupId = "6869c3f4-af50-400e-9c5f-d04c6bc0a307"
                        },
                        new
                        {
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f",
                            GroupId = "4acf3fd3-872c-493f-a8fa-d38330d2428a"
                        },
                        new
                        {
                            UserId = "f5d89a9e-c88d-4821-a036-0ec05b565b8f",
                            GroupId = "6869c3f4-af50-400e-9c5f-d04c6bc0a307"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c8ec449b-90b2-4f4e-8bcd-54f5f89c8ffa",
                            ConcurrencyStamp = "52f0cb42-646d-4b38-8fc3-415791315cca",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "098503ec-109a-4d37-b9e7-4d8f3c84159d",
                            RoleId = "c8ec449b-90b2-4f4e-8bcd-54f5f89c8ffa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Reply", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
