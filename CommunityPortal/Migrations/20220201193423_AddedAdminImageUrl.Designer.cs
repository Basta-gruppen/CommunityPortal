// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220201193423_AddedAdminImageUrl")]
    partial class AddedAdminImageUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9d2c7bd9-8d2b-45a5-9e1e-87392d0858bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8af89bc0-34c5-4b1f-a5cb-4dd25bc8e85e",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            ImageURL = "/images/default-profile.png",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGNxbygzYcLLDFF0SipVDyt7kVA2s7jVYlGq0lN/I5PDlrMZYYnwjcAv/XvsNgc1kw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fcab429-8e2c-460e-ae66-87c3d2cda96c",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "e333f603-29f0-4ce7-8dd3-ff89508cef36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8c972e6-7ddb-4cf6-bfe5-ba7860d7bb22",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEICCG+x9O7Bxsw1Ujuaxo50snsQHLIq8wweP9XvJbGJR2YXuMorKmQZAwKwA3kaa6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac12274d-b03b-4dab-9304-f50b6f18f25b",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "927b42b1-635f-46c7-af29-eab7a78f8822",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2072105-11e4-4844-a07e-df18c78e5ecf",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEDIpVNODC7KnICfIkaKdEIZt3gT/D2E2qcg9aF/3dDSBQFSpCgkz4q/OHqjQ1yu1vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0eec2c9f-01f6-4204-a205-8dd74ebc589e",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "b22003a5-25f0-408c-ac40-bbf13e9322b4",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "aa8ddfad-98f4-4c57-b630-474c7ba9514e",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "b22003a5-25f0-408c-ac40-bbf13e9322b4",
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            CategoryId = "aa8ddfad-98f4-4c57-b630-474c7ba9514e",
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            CategoryId = "aa8ddfad-98f4-4c57-b630-474c7ba9514e",
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "83c60eda-b7c8-478a-88f4-d790842daf84",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "f171a852-bd7a-4f79-9a60-5b61d5710d28",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 2, 4, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(952),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 2, 1, 20, 34, 22, 505, DateTimeKind.Local).AddTicks(7764),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "4e2e9201-c457-4d0e-a494-87d708e8c5cc",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 11, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(1464),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 2, 1, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(1445),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "e400ac20-8f62-42a9-a150-e676bb21b60f",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "d443af63-669a-463f-b7b7-7561b50dd76e",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "81bfe845-ebc9-4ca5-9e56-98652694aca3",
                            Name = "Gamers",
                            OwnerId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "c36b9b16-77b9-40b9-87d8-77c7d1a2d8fb",
                            Name = "Programmers",
                            OwnerId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "6d2af965-c19e-4165-834f-5b969c62c51f",
                            Name = "General",
                            OwnerId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "9b09c258-3c8b-4fcb-9f68-73c2ecec2f15",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "83c60eda-b7c8-478a-88f4-d790842daf84",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(6872),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "1750327f-5d7b-4754-839f-b875b9b7f6dd",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "83c60eda-b7c8-478a-88f4-d790842daf84",
                            TimeStamp = new DateTime(2022, 2, 1, 23, 34, 22, 508, DateTimeKind.Local).AddTicks(7250),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "de10d3d4-d5e6-4c6c-81d8-b3e8772b6613",
                            CategoryId = "b22003a5-25f0-408c-ac40-bbf13e9322b4",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 2, 1, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(9378),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "1161c54d-2c22-408e-8b60-9f967f76402a",
                            CategoryId = "aa8ddfad-98f4-4c57-b630-474c7ba9514e",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 2, 1, 20, 34, 22, 508, DateTimeKind.Local).AddTicks(9784),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "de10d3d4-d5e6-4c6c-81d8-b3e8772b6613",
                            TagId = "4a646082-b17b-4d80-9f8d-cf79868c2c76"
                        },
                        new
                        {
                            PostId = "de10d3d4-d5e6-4c6c-81d8-b3e8772b6613",
                            TagId = "d1209528-7da5-428c-8107-7e04429843de"
                        },
                        new
                        {
                            PostId = "1161c54d-2c22-408e-8b60-9f967f76402a",
                            TagId = "4a646082-b17b-4d80-9f8d-cf79868c2c76"
                        },
                        new
                        {
                            PostId = "1161c54d-2c22-408e-8b60-9f967f76402a",
                            TagId = "822ef3e4-86bf-48df-b041-ca69b7f715dc"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuoteId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "bb3dc884-36ae-40f9-aa34-458d383bbf73",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "25d3e7bf-a4c1-4eff-bb65-02da8ba55688",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 34, 22, 510, DateTimeKind.Local).AddTicks(935),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "a6b982f0-bb58-4299-9089-f04994bf417e",
                            Content = "Use google.",
                            ThreadId = "25d3e7bf-a4c1-4eff-bb65-02da8ba55688",
                            TimeStamp = new DateTime(2022, 2, 2, 1, 34, 22, 510, DateTimeKind.Local).AddTicks(1306),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "070f69ba-a818-4516-a7c3-08e3fe9e4d82",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "7dd3645f-ee52-45b8-9f2d-69dd23146485",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 34, 22, 510, DateTimeKind.Local).AddTicks(1327),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "f24830a4-8839-41fd-89c4-58118ebf64e8",
                            Content = "lol noob",
                            ThreadId = "7dd3645f-ee52-45b8-9f2d-69dd23146485",
                            TimeStamp = new DateTime(2022, 2, 2, 0, 34, 22, 510, DateTimeKind.Local).AddTicks(1334),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "f51301f0-38e0-4651-b030-e4558c0b7db1",
                            Content = "COME 1V1 ME",
                            ThreadId = "7dd3645f-ee52-45b8-9f2d-69dd23146485",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 34, 22, 510, DateTimeKind.Local).AddTicks(1341),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "977fda74-3551-4d3b-92a7-23f257ae5f07",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "a3e03e3e-62d1-4134-ac90-4d637e441a30",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 34, 22, 510, DateTimeKind.Local).AddTicks(1357),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "b53c59b5-b37c-463a-ae55-fa7f92383cfb",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "a3e03e3e-62d1-4134-ac90-4d637e441a30",
                            TimeStamp = new DateTime(2022, 2, 1, 22, 34, 22, 510, DateTimeKind.Local).AddTicks(1364),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "68d442d8-08f9-4c89-89ae-700db063f058",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "e400ac20-8f62-42a9-a150-e676bb21b60f",
                            Name = "C#",
                            OwnerId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "60186196-f38e-4528-8983-9f2e9c3713fb",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "d443af63-669a-463f-b7b7-7561b50dd76e",
                            Name = "League of Legends",
                            OwnerId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "cb73d2d1-d032-49cf-885b-a163f69e655e",
                            Description = "Everything about Minecraft",
                            ForumId = "d443af63-669a-463f-b7b7-7561b50dd76e",
                            Name = "Minecraft",
                            OwnerId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "81bfe845-ebc9-4ca5-9e56-98652694aca3",
                            SubForumId = "60186196-f38e-4528-8983-9f2e9c3713fb"
                        },
                        new
                        {
                            GroupId = "81bfe845-ebc9-4ca5-9e56-98652694aca3",
                            SubForumId = "cb73d2d1-d032-49cf-885b-a163f69e655e"
                        },
                        new
                        {
                            GroupId = "c36b9b16-77b9-40b9-87d8-77c7d1a2d8fb",
                            SubForumId = "68d442d8-08f9-4c89-89ae-700db063f058"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "4a646082-b17b-4d80-9f8d-cf79868c2c76",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "d1209528-7da5-428c-8107-7e04429843de",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "822ef3e4-86bf-48df-b041-ca69b7f715dc",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "25d3e7bf-a4c1-4eff-bb65-02da8ba55688",
                            SubForumId = "68d442d8-08f9-4c89-89ae-700db063f058",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 2, 1, 20, 34, 22, 509, DateTimeKind.Local).AddTicks(8623),
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36"
                        },
                        new
                        {
                            Id = "7dd3645f-ee52-45b8-9f2d-69dd23146485",
                            SubForumId = "60186196-f38e-4528-8983-9f2e9c3713fb",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 2, 2, 20, 34, 22, 509, DateTimeKind.Local).AddTicks(9018),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        },
                        new
                        {
                            Id = "a3e03e3e-62d1-4134-ac90-4d637e441a30",
                            SubForumId = "cb73d2d1-d032-49cf-885b-a163f69e655e",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 2, 2, 2, 34, 22, 509, DateTimeKind.Local).AddTicks(9040),
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36",
                            ConversationId = "83c60eda-b7c8-478a-88f4-d790842daf84"
                        },
                        new
                        {
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822",
                            ConversationId = "83c60eda-b7c8-478a-88f4-d790842daf84"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36",
                            GroupId = "81bfe845-ebc9-4ca5-9e56-98652694aca3"
                        },
                        new
                        {
                            UserId = "e333f603-29f0-4ce7-8dd3-ff89508cef36",
                            GroupId = "c36b9b16-77b9-40b9-87d8-77c7d1a2d8fb"
                        },
                        new
                        {
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822",
                            GroupId = "81bfe845-ebc9-4ca5-9e56-98652694aca3"
                        },
                        new
                        {
                            UserId = "927b42b1-635f-46c7-af29-eab7a78f8822",
                            GroupId = "c36b9b16-77b9-40b9-87d8-77c7d1a2d8fb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9d39b344-1ff9-4a3c-b745-86e062bb0faf",
                            ConcurrencyStamp = "287888dd-1cc0-42e8-863c-bc2507de5c1e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f52267f1-7b3c-48da-915e-238bfda321d9",
                            ConcurrencyStamp = "516660a2-f28d-486e-b7c0-fa29894acdf1",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9d2c7bd9-8d2b-45a5-9e1e-87392d0858bc",
                            RoleId = "9d39b344-1ff9-4a3c-b745-86e062bb0faf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Reply", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
