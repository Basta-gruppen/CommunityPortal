// <auto-generated />
using System;
using CommunityPortal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunityPortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220127100607_SubForumOwnerId")]
    partial class SubForumOwnerId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CommunityPortal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b540e779-3ff6-424a-9375-8e9817ceaaa0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbb95c21-9a16-4d1c-906f-de07520eb975",
                            Email = "seeduser@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=2",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEOtUkrHF4X2adYzZQyvDylIaVDopLOnMP42pCN7N3+O34c+wBaMpU5jOGnud1w9KpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7458390e-a077-4608-a9ae-90441e12f1e2",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser"
                        },
                        new
                        {
                            Id = "3b608417-03da-4732-8663-58daa6c8cdd2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a079ec94-b5a0-41d8-8ec1-de227d33b7fb",
                            Email = "seeduser2@gmail.com",
                            EmailConfirmed = false,
                            ImageURL = "https://i.pravatar.cc/100?img=4",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER2@GMAIL.COM",
                            NormalizedUserName = "SEEDUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4/oAjEVSb/2iGWNmlxFdI5F8BUEImJu5//7U6X26Vdib6Rhdo56jN2IBSwMuyJ3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c16b1d6a-cd71-454f-a286-950ca48cc751",
                            TwoFactorEnabled = false,
                            UserName = "SeedUser2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "07504bde-3aed-4f50-a5cb-2bbbf26f96f1",
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = "75bf782a-8b12-4d1d-b202-9885db6f0bb0",
                            Name = "Health & Safety"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CategorySubscribers");

                    b.HasData(
                        new
                        {
                            CategoryId = "07504bde-3aed-4f50-a5cb-2bbbf26f96f1",
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            CategoryId = "75bf782a-8b12-4d1d-b202-9885db6f0bb0",
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            CategoryId = "75bf782a-8b12-4d1d-b202-9885db6f0bb0",
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = "60901eff-c237-45ce-9e3a-ffc3d1034a87",
                            Subject = "A cool conversation between seeded users"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = "92be5442-7a84-4d96-8ff0-b8dd80dd2b6e",
                            Content = "We will be meeting in the town centre on the specified date.",
                            StartDate = new DateTime(2022, 1, 30, 11, 6, 7, 184, DateTimeKind.Local).AddTicks(4075),
                            Subject = "Meeting in town centre",
                            Timestamp = new DateTime(2022, 1, 27, 11, 6, 7, 182, DateTimeKind.Local).AddTicks(1133),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "7094b713-a852-4718-828b-cd001aeb64b4",
                            Content = "We will begin a riot on Walmart on the second street",
                            StartDate = new DateTime(2022, 2, 6, 11, 6, 7, 184, DateTimeKind.Local).AddTicks(4527),
                            Subject = "Riot at Walmart",
                            Timestamp = new DateTime(2022, 1, 27, 11, 6, 7, 184, DateTimeKind.Local).AddTicks(4508),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = "a88553b7-594c-4f29-987c-25f960b8939c",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = "e47efd52-80c7-49db-ae21-46e466cd9eb4",
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = "17a3e6b3-8e60-40ac-ae33-d9b9d3b23f59",
                            Name = "Gamers",
                            OwnerId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "f1a6fa7a-4e85-47fc-84dc-f7cc96346df5",
                            Name = "Programmers",
                            OwnerId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "48503736-b8cb-4ac9-be1c-9c18331639df",
                            Name = "General",
                            OwnerId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = "d25dcc5b-5017-4b63-b359-1682f7033ac4",
                            Content = "Hello my dear friend, how are you doing?",
                            ConversationId = "60901eff-c237-45ce-9e3a-ffc3d1034a87",
                            TimeStamp = new DateTime(2022, 1, 27, 11, 6, 7, 184, DateTimeKind.Local).AddTicks(9536),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "703c28ba-ee0a-435c-b617-b5dbd5f3af76",
                            Content = "Hi! I'm doing great, thanks for asking!!",
                            ConversationId = "60901eff-c237-45ce-9e3a-ffc3d1034a87",
                            TimeStamp = new DateTime(2022, 1, 27, 14, 6, 7, 184, DateTimeKind.Local).AddTicks(9904),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "d23227c4-b4d7-47c0-91b2-72837a86e7d3",
                            CategoryId = "07504bde-3aed-4f50-a5cb-2bbbf26f96f1",
                            Content = "Thank you so much for reading my first post, it means a lot to me!",
                            Subject = "This is my first post (:",
                            Timestamp = new DateTime(2022, 1, 27, 11, 6, 7, 185, DateTimeKind.Local).AddTicks(1885),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "d05d1689-fd5e-4d3e-8efd-a774e0017481",
                            CategoryId = "75bf782a-8b12-4d1d-b202-9885db6f0bb0",
                            Content = "Hey so I made my first post today, and this it! It's not much but it's something.",
                            Subject = "So I made my first post today..",
                            Timestamp = new DateTime(2022, 1, 29, 0, 6, 7, 185, DateTimeKind.Local).AddTicks(2264),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = "d23227c4-b4d7-47c0-91b2-72837a86e7d3",
                            TagId = "87911303-4163-4bc8-baf7-8e8b7bc37b9e"
                        },
                        new
                        {
                            PostId = "d23227c4-b4d7-47c0-91b2-72837a86e7d3",
                            TagId = "7909d965-9aea-4551-ae07-8e933e94de47"
                        },
                        new
                        {
                            PostId = "d05d1689-fd5e-4d3e-8efd-a774e0017481",
                            TagId = "87911303-4163-4bc8-baf7-8e8b7bc37b9e"
                        },
                        new
                        {
                            PostId = "d05d1689-fd5e-4d3e-8efd-a774e0017481",
                            TagId = "cfb2e951-4e31-46f9-afbe-0586a7407e43"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");

                    b.HasData(
                        new
                        {
                            Id = "9062bc29-b7b3-4dad-9c6a-31665b4230da",
                            Content = "I've been trying really long to figure how to print text but I just get errors plz help",
                            ThreadId = "f0d585d7-a95e-44dc-b495-d2d4cc8faa67",
                            TimeStamp = new DateTime(2022, 1, 27, 11, 6, 7, 186, DateTimeKind.Local).AddTicks(3066),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "33cd0dab-8017-44d0-bde6-0f7724850c24",
                            Content = "Use google.",
                            ThreadId = "f0d585d7-a95e-44dc-b495-d2d4cc8faa67",
                            TimeStamp = new DateTime(2022, 1, 27, 16, 6, 7, 186, DateTimeKind.Local).AddTicks(3464),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "a84d9a19-1842-44ef-b20a-a454d0c60938",
                            Content = "This is the most toxic game ever, everybody is just flaming. I QUIT!!!",
                            ThreadId = "2ad3c1d4-a154-49dc-a2c7-8f09365afa30",
                            TimeStamp = new DateTime(2022, 1, 27, 11, 6, 7, 186, DateTimeKind.Local).AddTicks(3486),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "f644f65a-ebda-4a26-aefe-ee797801f623",
                            Content = "lol noob",
                            ThreadId = "2ad3c1d4-a154-49dc-a2c7-8f09365afa30",
                            TimeStamp = new DateTime(2022, 1, 27, 15, 6, 7, 186, DateTimeKind.Local).AddTicks(3493),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "52b67e0f-7c2d-4a93-a4d1-d723a3f81229",
                            Content = "COME 1V1 ME",
                            ThreadId = "2ad3c1d4-a154-49dc-a2c7-8f09365afa30",
                            TimeStamp = new DateTime(2022, 1, 27, 17, 6, 7, 186, DateTimeKind.Local).AddTicks(3499),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "f5e7d33e-2508-4129-b6ec-0524e569e46c",
                            Content = "I can't find diamonds anywhere, it's really hard :(",
                            ThreadId = "07e0295c-6d84-4d24-a9b9-8099dc24b300",
                            TimeStamp = new DateTime(2022, 1, 27, 11, 6, 7, 186, DateTimeKind.Local).AddTicks(3509),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "06c5ddc4-3baa-4859-be98-cbac1a0a0e6e",
                            Content = "I thinks it's below y-level 12 try that! ((:",
                            ThreadId = "07e0295c-6d84-4d24-a9b9-8099dc24b300",
                            TimeStamp = new DateTime(2022, 1, 27, 13, 6, 7, 186, DateTimeKind.Local).AddTicks(3516),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("SubForums");

                    b.HasData(
                        new
                        {
                            Id = "d0936709-f91a-436d-b66b-4bfa1e5fd239",
                            Description = "All programming related to the C# language and it's frameworks",
                            ForumId = "a88553b7-594c-4f29-987c-25f960b8939c",
                            Name = "C#",
                            OwnerId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "1417e5fd-40fc-4c1d-a457-8297e6501a4a",
                            Description = "SubForum about the game League of Legends",
                            ForumId = "e47efd52-80c7-49db-ae21-46e466cd9eb4",
                            Name = "League of Legends",
                            OwnerId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "211096a2-29f1-40ee-9e03-a8e5255ceb55",
                            Description = "Everything about Minecraft",
                            ForumId = "e47efd52-80c7-49db-ae21-46e466cd9eb4",
                            Name = "Minecraft",
                            OwnerId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("GroupId", "SubForumId");

                    b.HasIndex("SubForumId");

                    b.ToTable("SubForumGroups");

                    b.HasData(
                        new
                        {
                            GroupId = "17a3e6b3-8e60-40ac-ae33-d9b9d3b23f59",
                            SubForumId = "1417e5fd-40fc-4c1d-a457-8297e6501a4a"
                        },
                        new
                        {
                            GroupId = "17a3e6b3-8e60-40ac-ae33-d9b9d3b23f59",
                            SubForumId = "211096a2-29f1-40ee-9e03-a8e5255ceb55"
                        },
                        new
                        {
                            GroupId = "f1a6fa7a-4e85-47fc-84dc-f7cc96346df5",
                            SubForumId = "d0936709-f91a-436d-b66b-4bfa1e5fd239"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "87911303-4163-4bc8-baf7-8e8b7bc37b9e",
                            Name = "First Post"
                        },
                        new
                        {
                            Id = "7909d965-9aea-4551-ae07-8e933e94de47",
                            Name = "Informative"
                        },
                        new
                        {
                            Id = "cfb2e951-4e31-46f9-afbe-0586a7407e43",
                            Name = "Casual"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SubForumId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new
                        {
                            Id = "f0d585d7-a95e-44dc-b495-d2d4cc8faa67",
                            SubForumId = "d0936709-f91a-436d-b66b-4bfa1e5fd239",
                            Subject = "How do I print text?",
                            TimeStamp = new DateTime(2022, 1, 27, 11, 6, 7, 186, DateTimeKind.Local).AddTicks(804),
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0"
                        },
                        new
                        {
                            Id = "2ad3c1d4-a154-49dc-a2c7-8f09365afa30",
                            SubForumId = "1417e5fd-40fc-4c1d-a457-8297e6501a4a",
                            Subject = "Why League is the most toxic game",
                            TimeStamp = new DateTime(2022, 1, 28, 11, 6, 7, 186, DateTimeKind.Local).AddTicks(1163),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        },
                        new
                        {
                            Id = "07e0295c-6d84-4d24-a9b9-8099dc24b300",
                            SubForumId = "211096a2-29f1-40ee-9e03-a8e5255ceb55",
                            Subject = "Where to find diamonds?",
                            TimeStamp = new DateTime(2022, 1, 27, 17, 6, 7, 186, DateTimeKind.Local).AddTicks(1189),
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConversationId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("UserConversations");

                    b.HasData(
                        new
                        {
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0",
                            ConversationId = "60901eff-c237-45ce-9e3a-ffc3d1034a87"
                        },
                        new
                        {
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2",
                            ConversationId = "60901eff-c237-45ce-9e3a-ffc3d1034a87"
                        });
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0",
                            GroupId = "17a3e6b3-8e60-40ac-ae33-d9b9d3b23f59"
                        },
                        new
                        {
                            UserId = "b540e779-3ff6-424a-9375-8e9817ceaaa0",
                            GroupId = "f1a6fa7a-4e85-47fc-84dc-f7cc96346df5"
                        },
                        new
                        {
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2",
                            GroupId = "17a3e6b3-8e60-40ac-ae33-d9b9d3b23f59"
                        },
                        new
                        {
                            UserId = "3b608417-03da-4732-8663-58daa6c8cdd2",
                            GroupId = "f1a6fa7a-4e85-47fc-84dc-f7cc96346df5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunityPortal.Models.CategorySubscriber", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("CategorySubscribers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Event", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Group", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Message", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Post", b =>
                {
                    b.HasOne("CommunityPortal.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.PostTag", b =>
                {
                    b.HasOne("CommunityPortal.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Reply", b =>
                {
                    b.HasOne("CommunityPortal.Models.Thread", "Thread")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForum", b =>
                {
                    b.HasOne("CommunityPortal.Models.Forum", "Forum")
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.SubForumGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("SubForumGroups")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.Thread", b =>
                {
                    b.HasOne("CommunityPortal.Models.SubForum", "SubForum")
                        .WithMany("Threads")
                        .HasForeignKey("SubForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserConversation", b =>
                {
                    b.HasOne("CommunityPortal.Models.Conversation", "Conversation")
                        .WithMany("UsersConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityPortal.Models.UserGroup", b =>
                {
                    b.HasOne("CommunityPortal.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommunityPortal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
